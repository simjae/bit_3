package defualt_package;
/*
  
 [추상클랫스 :인터페이스 공통점]
추상클래스 : 인터페이스 비교

인터페이스 : 표준 , 약속, 규칙, 규약 만드는행위


추상클래스 : 인터페이스 공통점 
1. 스스로 객체 생성 불가능 (new연산자 사용 불가능)
1.1 차이점 : 추상클래스(완성 + 미완성), 인터페이스 (모든것이 미완성)

2.사용
추상클래스 extends >> 확장이라는 표현 완성(자식)된것도 포함이여서 
인터페이스 implements(구현)
class Car  extends abclss{}
class Car implements la {}

가지고 있는 자원(추상)>> extends , implements 하는 클래스 강제 구현...(재정의)

[추상클랫스 :인터페이스 다른]
1.인터페이스는 다중구현 가능 >> 작은단위 >> 여러개 >> 모아서 큰약
약속을 만든다 >> 약속 너무 크게>> 사용성이 떨어진다
class Text extends Object implments Ia, Ib ,Ic 
인터페이스와 인터페이스는 extends 가능

2.추상클래스는 단일상속 원칙(계층적 상속)

3.추상클래스 (완성 코드 + 미완성 코드)

4.인터페이스 (상수를  제외한 나머지는 미완성(추상)자원>> JDK.8(Default 
 
 인터페이스는 소프트웨어 설계 최상위 단계 
 어떤 프로젝트 진행... 약속정의 

 **개발자 (초급)
 1.인터페이스를 [다향성 ] 입장으로 접근(인터페이스 부모타입_\)
 2.서로 연관성이 없는 클래스를 하나로 묶어주는 기능을 한다(같은부모를 가지게)
 3.JAVA API가 수만은 Interface 만들어 놓았어요,,설계하지 않아도 ..사용방법만 알면됨
 4.인터페이스(~able ): 날수 있는, 수리할 수 있는(설계)
 5. 객체간 연결고리 (객체간 소통 ) >> 다형성 
 
 
 
 
 
 
 */
//interface Ia{
//	String print();//약속만 가지고있다. >> 출력할때는 print사용하고 return은 문자로 해라 
//	
//}
//class Test implements Ia{
//
//	@Override
//	public String print() {
//		// TODO Auto-generated method stub
//		return null;
//	}
//	
//}

/*
 설계표준 >> 구현 >>재정의
 
Interface 
1.실제 구현부를 가지고 있지 않다: 실행블럭이 없다:약속(설명)
	시스템에서 이동하는 것이 move 라는 이름을 사용하고 이동시에는 좌표값을 받아야한다...
	>>합의 >> void move(int x, int y );(x){}>>
	
	
	
2. 생성 방법 
	2.1상수(final): public static final int VERSION =1; >> [public static final] int VERSION = 1;
		생략 : [public static final] 컴파일러가 알아서함
	2.2 함수(method) public abstract void run(); [public abstract] void run();	
Interface{
 	int VERSION =1 ;//[public static final ]...default
 	void run(); // [public abstract]..default
 	String move (int x, int y)
	}
	
interface lable{}
interface lable{int NUM=0;}
interface lable{void run();}

	
class Test extends Object implements ia,ia,ic
	
 */

interface Ia{
	int AGE =100;
	String GENDER = "남";
	
	String print();
	void message(String str);
	}


interface Ib{
	int AGE =100;
	
	void info(String str);
	String val(String s);
}

class Test extends Object implements Ia,Ib{

	@Override
	public void info(String str) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String val(String s) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String print() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void message(String str) {
		// TODO Auto-generated method stub
		
	}
	
}



public class Ex03_Interface {

	public static void main(String[] args) {
	Test t = new Test();
	Ia ia = t;//부모는 자식타입의 주소를 가질 수 있다(다형성)
	ia.message("AA");
	System.out.println(ia.AGE);
	Ib ib =t;
	System.out.println(ia.AGE);
	}

}














